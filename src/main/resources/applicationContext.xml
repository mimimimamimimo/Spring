<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd">
                                               
                                               <!-- 어노테이션 설정. sts쓰s네임스페이스 탭에서 context선택해서 추가가능 -->
                                                 <!-- 객체생성 후(생성자 호출 후) 멤버변수 초기화 init,파괴전 할 처리 destroy -->
                                                 <!-- 객체하나만 만들 빈은 싱글톤패턴으로, scope 값 추가함 -->
                                                 <!-- 메모리 누수 잡고싶으면 lazyunit 값 추가(로딩떄 아닌 런타임에 빈객체 생성) -->
                                                 
                                                 
                                                 
<context:component-scan base-package="com.springbook.biz"></context:component-scan>  
<!-- 컴포넌트 사용할것이다~base-package값에 패키지 이름 적으면 그 패키지 파생된 클래스 모두 스캔 -->

                                                 
           <!--     어노테이션 지원하면 빈 직접 여기서 등록할 필요가 없다                                 
<bean id="samsung" class="polymorphism.SamsungTV" init-method="initMethod" destroy-method="destroyMethod">
<constructor-arg ref="apple"></constructor-arg>   생성자인젝션이 있는 경우 init보다도 먼저 실행 
<constructor-arg value="2700000"></constructor-arg>  생성자 여러개면 인덱스 부여해서 고르기 가능 
또한, 원래 생성자에 파라미터 있으면 생성자 파라미터에 인자 넣은 생성코드가 있어야하는데 TVUser보면 알겠지만 없다. 여기서 생성시 넣을 인자 정해주기 때문. 
setter 주입도 있고  
</bean>   클래스값은 대충쓰고 컨트롤 스페이스~ 
<bean class="polymorphism.LgTV"/>   생략도 가능한데, 객체생성시엔 name이 꼭 있어야함 
<bean id="sony" class="polymorphism.SonySpeaker"></bean>
<bean id="apple" class="polymorphism.AppleSpeaker"></bean>
-->

<bean id="log" class="com.springbook.biz.common.Log4Advice"></bean>
<bean id="before" class="com.springbook.biz.common.BeforeAdvice"></bean>
<!-- 네임스페이스에 aop추가해야 빨간줄 안뜸 . log클래스 바꾸고 싶으면 윗줄만 바꾸면 됨.
조인포인트는 비즈니스 메소드(impl구현된 모든 클래스의 메소드)가 조인포인트다. 그중에서 내가 적용할 부분만 필터링 한 것이 포인트컷이다. 
예를 들어, 삽입,삭제하는건 트랜잭션 처리란 공통기능이 필요하지만 검색은 필요하지 않으므로 아래처럼 .필터링을 다르게 해준다.
아래에 expression뜻은 이러한 이름을 가진 클래스에만 모두 적용한다는 뜻이다. all은  id처럼 다 적용, get은 impl.get으로 시작하는 애한테만 적용

-->
<aop:config>
<aop:pointcut id="allPointcut" expression="execution(* com.springbook.biz..*Impl.*(..))"/>
<aop:pointcut id="getPointcut" expression="execution(* com.springbook.biz..*Impl.get*(..))"/>  <!-- 오타나기 쉬움 -->
<aop:aspect ref="log">
<aop:after pointcut-ref="getPointcut" method="printLogging"/>  <!-- 여기서 바꿔끼우는거지 --> <!-- 앞에 after of before가 어드바이스란거고 공통기능의 코드 자체를 의미함. 메소드 동작시점 결정 -->
</aop:aspect> 
<!-- 이런 것들이 aspect object programing이다. 말그대로 애스팩트가 중요하다는 것. 애스팩트= 포인트컷 + 어드바이스 = 포인트컷 메소드 호출시 어드바이스 메소드 삽입함.-->
 <!-- aspect대신 advisor로 할 수 있는데 걔는 method대신 id로 하는 애임. 왜..있는거지 -->


<aop:aspect ref="before">  <!-- 즉,동작시점은 비포,앱터,어라운드 있는데 로그찍기 같은건 앱터가 좋지 -->
<aop:before pointcut-ref="allPointcut" method="beforeLog"></aop:before>

</aop:aspect>      
</aop:config> 


<!-- JDBC Template 쓰기 위해서!!데이터소스 설정 중요함. jdbc util은 자바에서 제공하는 db연동 api인데 쓰려면 코드 너무 많이 써야하니꺄..템플릿 쓴다.
함수는 총 quaryforint,queryforobject,query가 있다. 각각 갯수세기, 결과객체받기 등인데 매핑을 위해선 rowmapper 상속이 필요하다. 

-->
<context:property-placeholder location="classpath:config/database.properties"/>
<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
<property name="driverClassName" value="${jdbc.driver}"/>
<property name="url" value="${jdbc.url}"/>
<property name="username" value="${jdbc.username}"/>
<property name="password" value="${jdbc.password}"/>
</bean>
<!--  
<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
<property name="url" value="jdbc:oracle:thin:@localhost:1521/xe"/>
<property name="username" value="chaeeun"/>
<property name="password" value="6657"/>
</bean>-->

<!-- 수푸링 jdbc 설정 -->
<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
<property name="dataSource" ref="dataSource"></property>
</bean>

</beans>


<!-- 빈등록 다하면 관리 힘들어짐. 데이터소스나 트랜잭션도 여기 등록하기 떄문. 그러므로 여러 xml파일로 나눠서 import시킨다. -->
<!-- sony쓰다가 apple써도 xml만 고치면 됨!~~ -->
<!-- p네임스페이스로 이름 관리 가능-->


